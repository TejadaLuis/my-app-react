{"version":3,"sources":["Server.jpg","Cable.jpg","components/Saludo.js","components/Operacion.js","components/OperacionMatriz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Saludo1","msj","color","Operacion","useState","valor","setValor","numero","setNumero","suma","setNum","onClick","console","log","OperacionMatriz","mes","setMes","texto","map","item","App","className","src","server","Saludo","cable","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,uKCa5BC,EAXC,SAACC,GACb,OACI,6BACI,4BACI,0BAAMC,MAAM,UAAZ,gF,OCuBDC,EA3BG,WAAO,IAAD,EACMC,mBAAS,GADf,mBACbC,EADa,KACNC,EADM,OAEQF,mBAAS,GAFjB,mBAEbG,EAFa,KAELC,EAFK,OAOGJ,mBAAS,GAPZ,mBAObK,EAPa,KAOPC,EAPO,KASpB,OACI,kBAAC,WAAD,KACI,0CACA,oFACA,6BACA,6BACA,4BAAQC,QAAS,kBAAML,EAASD,EAAO,KAAvC,oBACA,6BACA,6BACA,4BAAQM,QAfM,WAClBH,EAAUD,EAAS,GACnBK,QAAQC,IAAI,yBAaR,oBACA,6BACA,6BACA,4BAAQF,QAAS,kBAAMD,EAAOD,EAAOJ,EAAQE,KAA7C,YACA,sCAAYF,EAAZ,MAAsBE,EAAtB,MAAiCE,EAAjC,U,OCCGK,EAvBS,WAAO,IAAD,EACJV,mBAAS,CAAC,SAAS,WAAW,SAAS,SAAS,QAAS,WADrD,mBACnBW,EADmB,KACdC,EADc,QAGR,YAAOD,GAETX,mBAAS,CAAC,SAAU,UAAW,cAAe,WAAY,aAAc,gBAAjFa,EALmB,oBAU1B,OACI,kBAAC,WAAD,KACI,wDACEF,EAAIG,KAAI,SAACC,GAAD,OAAUA,KACpB,6BACA,sDACA,4BAAQR,QAVK,WAEjBK,EAAO,GAAD,mBAAKD,GAAL,YAAaE,OAQf,iBAEIF,EAAIG,KAAI,SAACC,GAAD,OAAU,+BAAKA,EAAL,UCWnBC,MAxBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,MACV,6BACA,2BACE,0BAAMrB,MAAM,SAAZ,qDAGF,6BACA,kBAACsB,EAAD,MACA,6BACA,yBAAKF,IAAKG,MACV,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,gCCbYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.347f465d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Server.cc785d7d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Cable.2027484a.jpg\";","import React from 'react';\r\n\r\nconst Saludo1 = (msj) => {\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <font color=\"orange\">Lo podrás hacer con nuestra carrera \r\n                de Computación e Informática</font>\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Saludo1;","import React, {useState, Fragment} from 'react';\r\n\r\nconst Operacion = () => {\r\n    const [valor, setValor] = useState(0);\r\n    const [numero, setNumero] = useState(0);\r\n    const IncrementoDos = () => {\r\n        setNumero(numero + 1);\r\n        console.log(\"Mensaje de contador\");\r\n    }\r\n    const [suma, setNum] = useState(0);\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>Componente</h1>\r\n            <span>Ingrese los 2 números para la multiplicación</span>\r\n            <br/>\r\n            <br/>\r\n            <button onClick={() => setValor(valor +1)}>1ª Número </button>\r\n            <br/>\r\n            <br/>\r\n            <button onClick={IncrementoDos}>2ª Número </button>\r\n            <br/>\r\n            <br/>\r\n            <button onClick={() => setNum(suma + valor + numero)}>Aceptar </button>\r\n            <span> --- {valor} + {numero} = {suma} ---</span>\r\n            </Fragment>\r\n    );\r\n}\r\n\r\nexport default Operacion;\r\n","import React, {useState, Fragment} from 'react';\r\n\r\nconst OperacionMatriz = () => {\r\n    const [mes, setMes] = useState(['Enero ','Febrero ','Marzo ','Abril ','Mayo ', 'Junio '])\r\n    \r\n    const uniendoArray = [...mes];\r\n    \r\n    const [texto] = useState(['Julio ', 'Agosto ', 'Septiembre ', 'Octubre ', 'Noviembre ', 'Diciembre ']);\r\n    const agregarTexto = () => {\r\n        //setTexto(texto);\r\n        setMes([...mes, ...texto]);\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <h1>Lista horizontal - Meses</h1>\r\n            { mes.map((item) => item) }\r\n            <hr />\r\n            <h1>Lista vertical - Meses</h1>\r\n            <button onClick={agregarTexto}>Agregar texto</button>\r\n            {\r\n                mes.map((item) => <p> {item} </p>)\r\n            }\r\n        </Fragment>\r\n    );\r\n} \r\nexport default OperacionMatriz;","import React from 'react';\nimport server from './Server.jpg';\nimport cable from './Cable.jpg';\nimport Saludo1 from './components/Saludo';\nimport Operacion from './components/Operacion';\nimport OperacionMatriz from './components/OperacionMatriz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={server} />\n        <hr />\n        <p>\n          <font color=\"black\">Puedes aprender a crear tu propia \n          página web!</font>\n        </p>\n        <hr />\n        <Saludo1 />\n        <hr />\n        <img src={cable} />\n        <hr />\n        <Operacion />\n        <hr />\n        <OperacionMatriz />\n        <hr />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}