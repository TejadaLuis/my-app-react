{"version":3,"sources":["components/Formulario.jsx","components/Props.js","App.js","serviceWorker.js","index.js"],"names":["Formulario1","useState","nombre","apellido","datos","setDatos","handleInputChange","event","target","name","value","className","onSubmit","preventDefault","console","log","type","placeholder","onChange","FormularioProps","props","dia","App","numero","Formulario","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMA0DeA,EAxDK,WAAO,IAAD,EAEIC,mBAAS,CAC/BC,OAAO,GACPC,SAAS,KAJS,mBAEfC,EAFe,KAERC,EAFQ,KAOhBC,EAAoB,SAACC,GAGvBF,EAAS,2BACFD,GADC,kBAEHG,EAAMC,OAAOC,KAAQF,EAAMC,OAAOE,UAS3C,OACI,kBAAC,WAAD,KACI,2CACA,0BAAMC,UAAU,MAAMC,SARV,SAACL,GACjBA,EAAMM,iBACNC,QAAQC,IAAIX,EAAMF,OAAS,MAAQE,EAAMD,YAOjC,yBAAKQ,UAAU,YACX,2BACIK,KAAK,OACLC,YAAY,sBACZN,UAAU,eACVF,KAAK,SACLS,SAAUZ,KAGlB,yBAAKK,UAAU,YACX,2BACIK,KAAK,OACLC,YAAY,wBACZN,UAAU,eACVF,KAAK,WACLS,SAAUZ,KAGlB,yBAAKK,UAAU,YACX,4BACIK,KAAK,SACLL,UAAU,mBAFd,aAOR,4BAAKP,EAAMF,OAAX,MAAsBE,EAAMD,YC3CzBgB,EARS,SAACC,GACrB,OACI,kBAAC,WAAD,KACI,mDAAsBA,EAAMC,OCWzBC,MAZf,WACE,OACE,yBAAKX,UAAU,kBACb,kBAAC,EAAD,CAAiBU,IAAI,QAAQE,OAAQ,IACrC,kBAAC,EAAD,CAAiBF,IAAI,SAASE,OAAQ,IACtC,kBAAC,EAAD,CAAiBF,IAAI,YAAYE,OAAQ,IACzC,6BACA,kBAACC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.a23312dd.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\n\r\nconst Formulario1 = () => {\r\n\r\n    const [datos, setDatos] = useState({\r\n        nombre:'',\r\n        apellido:''\r\n    })\r\n\r\n    const handleInputChange = (event) => {\r\n        //console.log(evento.target.value)\r\n        //Responde a cada cambio\r\n        setDatos({\r\n            ...datos,\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    const enviarDatos = (event) => {\r\n        event.preventDefault();\r\n        console.log(datos.nombre + ' - ' + datos.apellido);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>Formularios</h1>\r\n            <form className=\"row\" onSubmit={enviarDatos}>\r\n                <div className=\"col-md-4\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Escriba sus nombres\"\r\n                        className=\"form-control\"\r\n                        name=\"nombre\"\r\n                        onChange={handleInputChange}\r\n                        />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Escriba sus apellidos\"\r\n                        className=\"form-control\"\r\n                        name=\"apellido\"\r\n                        onChange={handleInputChange}\r\n                        />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary\"\r\n                    >Enviar </button>\r\n                </div>\r\n\r\n            </form>\r\n            <h3>{datos.nombre} - {datos.apellido}</h3>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Formulario1;","import React, {Fragment} from 'react';\r\n\r\nconst FormularioProps = (props) => {\r\n    return(\r\n        <Fragment>\r\n            <h1>DÃ­a de la semana {props.dia}</h1>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default FormularioProps;","import React from 'react';\nimport Formulario1 from './components/Formulario';\nimport FormularioProps from './components/Props';\n\nfunction App() {\n  return (\n    <div className=\"container mt-5\">\n      <FormularioProps dia=\"Lunes\" numero={1} />\n      <FormularioProps dia=\"Martes\" numero={2} />\n      <FormularioProps dia=\"Miercoles\" numero={3} />\n      <hr />\n      <Formulario1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}